# LoRa Image Transmission System

A robust Arduino-based solution for transmitting and receiving image data over LoRa (Long Range) radio networks. This project implements packet-based transmission with headers and markers to ensure reliable image transfer between two devices.

## Features

- **Packet-based transmission** - Splits large images into manageable chunks
- **Header protocol** - Each packet includes sequence information for reliable reconstruction
- **Start/End markers** - Clear transmission boundaries with metadata
- **Visual feedback** - Built-in LED indicates transmission status
- **Error handling** - CRC enabled for data integrity
- **Configurable parameters** - Easy adjustment of LoRa settings

## Hardware Requirements

- ESP32 or compatible microcontroller
- LoRa module (e.g., SX1276/SX1278)
- Antenna (433 MHz or appropriate frequency)

### Pin Configuration

```cpp
SS (Chip Select):  GPIO 5
RST (Reset):       GPIO 17
DIO0 (Interrupt):  GPIO 4
LED:               GPIO 22
```

## LoRa Configuration

| Parameter | Value | Description |
|-----------|-------|-------------|
| Frequency | 433 MHz | ISM band (adjust for your region) |
| Sync Word | 0x34 | Network identifier |
| Spreading Factor | 7 | Balance between range and speed |
| Bandwidth | 250 kHz | Signal bandwidth |
| Coding Rate | 4/5 | Error correction overhead |
| CRC | Enabled | Cyclic redundancy check |

## Installation

1. **Install Arduino IDE** (version 1.8.x or later)

2. **Install required libraries:**
   - [LoRa library by Sandeep Mistry](https://github.com/sandeepmistry/arduino-LoRa)
   ```
   Arduino IDE: Sketch → Include Library → Manage Libraries → Search "LoRa"
   ```

3. **Configure board:**
   - Select your ESP32 board from Tools → Board
   - Select the correct COM port

4. **Upload the code** to your device

## Usage

### Setting Up Sender

1. Convert your image to a byte array:
   - Use online tools or Python scripts to convert images to hex byte arrays
   - Replace the placeholder `myImageBytes[]` array with your image data

2. **Example conversion (Python):**
   ```python
   with open('image.jpg', 'rb') as f:
       bytes_data = f.read()
       hex_array = ', '.join([f'0x{b:02X}' for b in bytes_data])
       print(f'uint8_t myImageBytes[] = {{{hex_array}}};')
   ```

3. Upload `sender.ino` to your transmitter device

### Setting Up Receiver

1. Upload `receiver.ino` to your receiver device
2. Open Serial Monitor (115200 baud)
3. Wait for "LoRa Image Receiver Ready" message
4. The receiver will automatically detect and reconstruct transmitted images

### Monitoring Reception

The receiver provides detailed feedback:
```
Starting image reception: 15420 bytes in 66 packets
Packet 1/66 (234 bytes)
Progress: 1/66 packets received
RSSI: -45 dBm
...
All packets received!
=== IMAGE RECEIVED ===
```

### Transmission Protocol

The system uses a three-phase transmission protocol:

1. **START marker** - Sends total image size and packet count
2. **DATA packets** - Sequential packets with headers and image chunks
3. **END marker** - Signals transmission completion

### Packet Structure

Each data packet contains:
- **Header (6 bytes)**
  - `packetId` (2 bytes): Packet sequence number
  - `totalPackets` (2 bytes): Total number of packets
  - `dataSize` (2 bytes): Bytes in current packet
- **Payload (up to 234 bytes)**: Image data chunk

## Configuration Options

### Adjusting Packet Size

```cpp
#define MAX_PACKET_SIZE 240  // Maximum LoRa payload (adjust if needed)
```

### Changing Transmission Delay

```cpp
delay(30000);  // Time between transmissions (milliseconds)
delay(50);     // Delay between packets (milliseconds)
```

### Frequency Settings

Modify the frequency based on your region:
```cpp
LoRa.begin(433E6);  // 433 MHz (Europe/Asia)
// LoRa.begin(915E6);  // 915 MHz (Americas)
// LoRa.begin(868E6);  // 868 MHz (Europe)
```

## Receiver Code

A complete receiver implementation is included in this repository (`receiver.ino`). The receiver:
- Listens for `IMG_START` markers and allocates memory
- Collects and orders packets by `packetId`
- Reconstructs the image from received chunks
- Detects `IMG_END` marker for completion
- Outputs received image as hex array for verification
- Displays RSSI (signal strength) for each packet

### Receiver Features

- **Automatic memory management** - Dynamically allocates buffers
- **Packet tracking** - Monitors received vs. expected packets
- **Progress reporting** - Real-time reception status
- **Image format detection** - Identifies JPEG/PNG formats
- **Debug output** - Prints received image as C++ byte array
- **Missing packet detection** - Identifies lost packets

## Troubleshooting

| Issue | Solution |
|-------|----------|
| "Starting LoRa failed!" | Check wiring, verify pin connections |
| LED not blinking | Verify GPIO 22 is correct for your board |
| No transmission | Check antenna connection |
| Incomplete transmission | Increase delay between packets |
| Packets out of order | Receiver handles this automatically |
| Missing packets | Check RSSI values, improve antenna positioning |
| "Failed to allocate memory" | Image too large for available RAM, reduce size |

### Checking Signal Strength

Monitor the RSSI (Received Signal Strength Indicator) values:
- **-30 to -50 dBm**: Excellent signal
- **-50 to -70 dBm**: Good signal
- **-70 to -90 dBm**: Fair signal (may have packet loss)
- **Below -90 dBm**: Poor signal (expect packet loss)

## Performance Notes

- **Transmission time** depends on image size and LoRa settings
- **Typical speed**: ~1-5 kbps at SF7
- **Range**: Up to 2-10 km (line of sight, depends on environment)
- **Larger spreading factors** = longer range but slower speed
- **Memory requirements**: Receiver needs RAM equal to image size
- **Recommended max image size**: 
  - ESP32: ~100-200 KB (depending on available heap)
  - Arduino Uno: Not suitable for images (limited RAM)
  - ESP32-S3: Up to 500 KB possible

### Example Transmission Times

| Image Size | Packets | Approximate Time (SF7) |
|------------|---------|------------------------|
| 10 KB | 43 | ~30 seconds |
| 50 KB | 214 | ~2.5 minutes |
| 100 KB | 428 | ~5 minutes |

## License

This project is open source and available for modification and distribution.

## Contributing

Contributions are welcome! Feel free to:
- Report bugs
- Suggest improvements
- Submit pull requests

## Acknowledgments

- Built with [arduino-LoRa library](https://github.com/sandeepmistry/arduino-LoRa) by Sandeep Mistry
- Uses Semtech SX127x LoRa chips

---

**Note:** Ensure compliance with local radio regulations when operating LoRa devices on specific frequencies.
